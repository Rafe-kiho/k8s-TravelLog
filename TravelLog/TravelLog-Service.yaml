apiVersion: v1
kind: Service
metadata:
  name: example-service
  labels:
    app: example
  annotations:
    description: "Example Service for routing traffic"
spec:
  type: LoadBalancer
  selector:
    app: example
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 8080
      nodePort: 30007
    - name: https
      protocol: TCP
      port: 443
      targetPort: 8443
      nodePort: 30008
  clusterIP: 10.96.0.1
  loadBalancerIP: 192.168.0.1
  externalTrafficPolicy: Local
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800
  externalName: my.external.example.com
  healthCheckNodePort: 32000
  publishNotReadyAddresses: true
  allocateLoadBalancerNodePorts: true
  ipFamilies:
    - IPv4
    - IPv6
  ipFamilyPolicy: PreferDualStack
  internalTrafficPolicy: Cluster
  loadBalancerSourceRanges:
    - 192.168.1.0/24
    - 192.168.2.0/24
---
apiVersion: v1
kind: Service
metadata:
  name: example-service
  labels:
    app: example
  annotations:
    description: "Example Service for routing traffic"
spec:
  type: LoadBalancer
  selector:
    app: example
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 8080
      nodePort: 30007
    - name: https
      protocol: TCP
      port: 443
      targetPort: 8443
      nodePort: 30008
  clusterIP: 10.96.0.1
  loadBalancerIP: 192.168.0.1
  externalTrafficPolicy: Local
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800
  externalName: my.external.example.com
  healthCheckNodePort: 32000
  publishNotReadyAddresses: true
  allocateLoadBalancerNodePorts: true
  ipFamilies:
    - IPv4
    - IPv6
  ipFamilyPolicy: PreferDualStack
  internalTrafficPolicy: Cluster
  loadBalancerSourceRanges:
    - 192.168.1.0/24
    - 192.168.2.0/24

# 메타데이터를 포함하여 Service의 이름, 라벨, 설명을 정의합니다.
# 서비스 타입: 여기서는 LoadBalancer 타입을 사용하여 클라우드 프로바이더의 로드 밸런서를 사용하도록 설정합니다.
# 포트 설정: 서비스가 클라이언트 요청을 받을 포트와 해당 요청을 전달할 타깃 포트를 정의합니다. nodePort는 직접 노드에 접근할 때 사용할 포트입니다.
# 클러스터 IP 및 로드 밸런서 IP: 내부 IP와 외부 IP를 정의합니다.
# 세션 유지: ClientIP를 기반으로 세션 유지 설정을 사용하여, 같은 클라이언트의 요청을 같은 파드로 라우팅합니다.
# IP 패밀리: IPv4와 IPv6를 모두 지원하는 듀얼-스택 설정을 사용합니다.
# 소스 범위 제한: 특정 IP 범위에서만 접근을 허용합니다.